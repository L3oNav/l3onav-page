{"ast":null,"code":"var _jsxFileName = \"/home/l3onav/Projects/Js/l3onav-page/src/hooks/language.js\";\nvar __jsx = React.createElement;\nimport { Languages } from \"../contexts/languages.context\";\nimport React, { useState, useLayoutEffect } from \"react\";\nconst LangContext = /*#__PURE__*/React.createContext({\n  lang: \"\",\n  currentLangData: {},\n  switchLang: () => {}\n});\nexport default LangContext;\nexport const LangProvider = props => {\n  const {\n    0: lang,\n    1: setLang\n  } = useState(\"en-US\");\n  useLayoutEffect(() => {\n    const selectedLang = window.localStorage.getItem(\"appUILang\");\n    console.log(selectedLang);\n\n    if (selectedLang) {\n      setLang(selectedLang);\n    }\n  }, [lang]);\n\n  const switchLang = ln => {\n    setLang(ln);\n    window.localStorage.setItem(\"appUILang\", ln);\n  };\n\n  return __jsx(LangContext.Provider, {\n    value: {\n      lang,\n      switchLang,\n      currentLangData: Languages[lang]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/home/l3onav/Projects/Js/l3onav-page/src/hooks/language.js"],"names":["Languages","React","useState","useLayoutEffect","LangContext","createContext","lang","currentLangData","switchLang","LangProvider","props","setLang","selectedLang","window","localStorage","getItem","console","log","ln","setItem","children"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,+BAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,eAA1B,QAAiD,OAAjD;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACtCC,EAAAA,IAAI,EAAE,EADgC;AAEtCC,EAAAA,eAAe,EAAE,EAFqB;AAGtCC,EAAAA,UAAU,EAAE,MAAM,CAAE;AAHkB,CAApB,CAApB;AAMA,eAAeJ,WAAf;AAEA,OAAO,MAAMK,YAAY,GAAIC,KAAD,IAAW;AACrC,QAAM;AAAA,OAACJ,IAAD;AAAA,OAAOK;AAAP,MAAkBT,QAAQ,CAAC,OAAD,CAAhC;AAEAC,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAMS,YAAY,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,CAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;;AACA,QAAIA,YAAJ,EAAkB;AAChBD,MAAAA,OAAO,CAACC,YAAD,CAAP;AACD;AACF,GANc,EAMZ,CAACN,IAAD,CANY,CAAf;;AAQA,QAAME,UAAU,GAAIU,EAAD,IAAQ;AACzBP,IAAAA,OAAO,CAACO,EAAD,CAAP;AACAL,IAAAA,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4B,WAA5B,EAAyCD,EAAzC;AACD,GAHD;;AAKA,SACE,MAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLZ,MAAAA,IADK;AAELE,MAAAA,UAFK;AAGLD,MAAAA,eAAe,EAAEP,SAAS,CAACM,IAAD;AAHrB,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGI,KAAK,CAACU,QAPT,CADF;AAWD,CA3BM","sourcesContent":["import { Languages } from \"../contexts/languages.context\";\nimport React, { useState, useLayoutEffect } from \"react\";\n\nconst LangContext = React.createContext({\n  lang: \"\",\n  currentLangData: {},\n  switchLang: () => {},\n});\n\nexport default LangContext;\n\nexport const LangProvider = (props) => {\n  const [lang, setLang] = useState(\"en-US\");\n\n  useLayoutEffect(() => {\n    const selectedLang = window.localStorage.getItem(\"appUILang\");\n    console.log(selectedLang);\n    if (selectedLang) {\n      setLang(selectedLang);\n    }\n  }, [lang]);\n\n  const switchLang = (ln) => {\n    setLang(ln);\n    window.localStorage.setItem(\"appUILang\", ln);\n  };\n\n  return (\n    <LangContext.Provider\n      value={{\n        lang,\n        switchLang,\n        currentLangData: Languages[lang],\n      }}\n    >\n      {props.children}\n    </LangContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}